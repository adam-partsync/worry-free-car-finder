// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Car finder related fields
  postcode      String?
  age           Int?
  experience    String?
  preferences   Json?

  accounts          Account[]
  sessions          Session[]
  searches          Search[]
  motChecks         MOTCheck[]
  dealerChecks      DealerCheck[]
  vehicleChecks     VehicleCheck[]
  vehicles          Vehicle[]
  maintenanceRecords MaintenanceRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Search {
  id          String   @id @default(cuid())
  userId      String
  query       String?
  filters     Json?
  results     Json?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MOTCheck {
  id           String   @id @default(cuid())
  userId       String
  registration String
  results      Json?
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DealerCheck {
  id         String   @id @default(cuid())
  userId     String
  dealerName String
  postcode   String?
  results    Json?
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VehicleCheck {
  id           String   @id @default(cuid())
  userId       String
  registration String
  vin          String?
  results      Json?
  paymentId    String?
  status       String   @default("pending") // pending, completed, failed
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id               String   @id @default(cuid())
  userId           String
  make             String
  model            String
  year             Int
  registration     String?
  vin              String?
  mileage          Int?
  fuelType         String?
  transmission     String?
  color            String?
  purchaseDate     DateTime?
  purchasePrice    Float?
  nickname         String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  maintenanceRecords MaintenanceRecord[]

  @@unique([userId, registration])
}

model MaintenanceRecord {
  id               String   @id @default(cuid())
  userId           String
  vehicleId        String
  serviceType      String   // oil_change, tire_rotation, brake_service, mot, service, repair, etc.
  description      String
  serviceProvider  String?  // garage name
  mileage          Int?
  cost             Float?
  laborCost        Float?
  partsCost        Float?
  nextServiceDue   DateTime?
  nextServiceMileage Int?
  notes            String?
  receiptImage     String?  // URL to uploaded receipt
  warrantyUntil    DateTime?
  isCompleted      Boolean  @default(true)
  reminderSent     Boolean  @default(false)
  serviceDate      DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}
